/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System.Collections.Generic;
using System.Text;
using System.Threading;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;

#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling


namespace InstagramAPI.Fbns
{
    public partial class ConnectPayload : TBase
    {
        private string _clientId;
        private string _willTopic;
        private string _willMessage;
        private ClientInfo _clientInfo;
        private string _password;
        private List<string> _diffRequests;
        private string _zeroRatingTokenHash;
        private Dictionary<string, string> _appSpecificInfo;

        public string ClientId
        {
            get
            {
                return _clientId;
            }
            set
            {
                __isset.clientId = true;
                this._clientId = value;
            }
        }

        public string WillTopic
        {
            get
            {
                return _willTopic;
            }
            set
            {
                __isset.willTopic = true;
                this._willTopic = value;
            }
        }

        public string WillMessage
        {
            get
            {
                return _willMessage;
            }
            set
            {
                __isset.willMessage = true;
                this._willMessage = value;
            }
        }

        public ClientInfo ClientInfo
        {
            get
            {
                return _clientInfo;
            }
            set
            {
                __isset.clientInfo = true;
                this._clientInfo = value;
            }
        }

        public string Password
        {
            get
            {
                return _password;
            }
            set
            {
                __isset.password = true;
                this._password = value;
            }
        }

        public List<string> DiffRequests
        {
            get
            {
                return _diffRequests;
            }
            set
            {
                __isset.diffRequests = true;
                this._diffRequests = value;
            }
        }

        public string ZeroRatingTokenHash
        {
            get
            {
                return _zeroRatingTokenHash;
            }
            set
            {
                __isset.zeroRatingTokenHash = true;
                this._zeroRatingTokenHash = value;
            }
        }

        public Dictionary<string, string> AppSpecificInfo
        {
            get
            {
                return _appSpecificInfo;
            }
            set
            {
                __isset.appSpecificInfo = true;
                this._appSpecificInfo = value;
            }
        }


        public Isset __isset;
        public struct Isset
        {
            public bool clientId;
            public bool willTopic;
            public bool willMessage;
            public bool clientInfo;
            public bool password;
            public bool diffRequests;
            public bool zeroRatingTokenHash;
            public bool appSpecificInfo;
        }

        public ConnectPayload()
        {
        }

        public ConnectPayload DeepCopy()
        {
            var tmp0 = new ConnectPayload();
            if((ClientId != null) && __isset.clientId)
            {
                tmp0.ClientId = this.ClientId;
            }
            tmp0.__isset.clientId = this.__isset.clientId;
            if((WillTopic != null) && __isset.willTopic)
            {
                tmp0.WillTopic = this.WillTopic;
            }
            tmp0.__isset.willTopic = this.__isset.willTopic;
            if((WillMessage != null) && __isset.willMessage)
            {
                tmp0.WillMessage = this.WillMessage;
            }
            tmp0.__isset.willMessage = this.__isset.willMessage;
            if((ClientInfo != null) && __isset.clientInfo)
            {
                tmp0.ClientInfo = (ClientInfo)this.ClientInfo.DeepCopy();
            }
            tmp0.__isset.clientInfo = this.__isset.clientInfo;
            if((Password != null) && __isset.password)
            {
                tmp0.Password = this.Password;
            }
            tmp0.__isset.password = this.__isset.password;
            if((DiffRequests != null) && __isset.diffRequests)
            {
                tmp0.DiffRequests = this.DiffRequests.DeepCopy();
            }
            tmp0.__isset.diffRequests = this.__isset.diffRequests;
            if((ZeroRatingTokenHash != null) && __isset.zeroRatingTokenHash)
            {
                tmp0.ZeroRatingTokenHash = this.ZeroRatingTokenHash;
            }
            tmp0.__isset.zeroRatingTokenHash = this.__isset.zeroRatingTokenHash;
            if((AppSpecificInfo != null) && __isset.appSpecificInfo)
            {
                tmp0.AppSpecificInfo = this.AppSpecificInfo.DeepCopy();
            }
            tmp0.__isset.appSpecificInfo = this.__isset.appSpecificInfo;
            return tmp0;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                await iprot.ReadStructBeginAsync(cancellationToken);
                while (true)
                {
                    field = await iprot.ReadFieldBeginAsync(cancellationToken);
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }

                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.String)
                            {
                                ClientId = await iprot.ReadStringAsync(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                WillTopic = await iprot.ReadStringAsync(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.String)
                            {
                                WillMessage = await iprot.ReadStringAsync(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 4:
                            if (field.Type == TType.Struct)
                            {
                                ClientInfo = new ClientInfo();
                                await ClientInfo.ReadAsync(iprot, cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 5:
                            if (field.Type == TType.String)
                            {
                                Password = await iprot.ReadStringAsync(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 6:
                            if (field.Type == TType.List)
                            {
                                {
                                    TList _list1 = await iprot.ReadListBeginAsync(cancellationToken);
                                    DiffRequests = new List<string>(_list1.Count);
                                    for(int _i2 = 0; _i2 < _list1.Count; ++_i2)
                                    {
                                        string _elem3;
                                        _elem3 = await iprot.ReadStringAsync(cancellationToken);
                                        DiffRequests.Add(_elem3);
                                    }
                                    await iprot.ReadListEndAsync(cancellationToken);
                                }
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 9:
                            if (field.Type == TType.String)
                            {
                                ZeroRatingTokenHash = await iprot.ReadStringAsync(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 10:
                            if (field.Type == TType.Map)
                            {
                                {
                                    TMap _map4 = await iprot.ReadMapBeginAsync(cancellationToken);
                                    AppSpecificInfo = new Dictionary<string, string>(_map4.Count);
                                    for(int _i5 = 0; _i5 < _map4.Count; ++_i5)
                                    {
                                        string _key6;
                                        string _val7;
                                        _key6 = await iprot.ReadStringAsync(cancellationToken);
                                        _val7 = await iprot.ReadStringAsync(cancellationToken);
                                        AppSpecificInfo[_key6] = _val7;
                                    }
                                    await iprot.ReadMapEndAsync(cancellationToken);
                                }
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        default: 
                            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            break;
                    }

                    await iprot.ReadFieldEndAsync(cancellationToken);
                }

                await iprot.ReadStructEndAsync(cancellationToken);
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                var struc = new TStruct("ConnectPayload");
                await oprot.WriteStructBeginAsync(struc, cancellationToken);
                var field = new TField();
                if((ClientId != null) && __isset.clientId)
                {
                    field.Name = "clientId";
                    field.Type = TType.String;
                    field.ID = 1;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteStringAsync(ClientId, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if((WillTopic != null) && __isset.willTopic)
                {
                    field.Name = "willTopic";
                    field.Type = TType.String;
                    field.ID = 2;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteStringAsync(WillTopic, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if((WillMessage != null) && __isset.willMessage)
                {
                    field.Name = "willMessage";
                    field.Type = TType.String;
                    field.ID = 3;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteStringAsync(WillMessage, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if((ClientInfo != null) && __isset.clientInfo)
                {
                    field.Name = "clientInfo";
                    field.Type = TType.Struct;
                    field.ID = 4;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await ClientInfo.WriteAsync(oprot, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if((Password != null) && __isset.password)
                {
                    field.Name = "password";
                    field.Type = TType.String;
                    field.ID = 5;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteStringAsync(Password, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if((DiffRequests != null) && __isset.diffRequests)
                {
                    field.Name = "diffRequests";
                    field.Type = TType.List;
                    field.ID = 6;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    {
                        await oprot.WriteListBeginAsync(new TList(TType.String, DiffRequests.Count), cancellationToken);
                        foreach (string _iter8 in DiffRequests)
                        {
                            await oprot.WriteStringAsync(_iter8, cancellationToken);
                        }
                        await oprot.WriteListEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if((ZeroRatingTokenHash != null) && __isset.zeroRatingTokenHash)
                {
                    field.Name = "zeroRatingTokenHash";
                    field.Type = TType.String;
                    field.ID = 9;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteStringAsync(ZeroRatingTokenHash, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if((AppSpecificInfo != null) && __isset.appSpecificInfo)
                {
                    field.Name = "appSpecificInfo";
                    field.Type = TType.Map;
                    field.ID = 10;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    {
                        await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, AppSpecificInfo.Count), cancellationToken);
                        foreach (string _iter9 in AppSpecificInfo.Keys)
                        {
                            await oprot.WriteStringAsync(_iter9, cancellationToken);
                            await oprot.WriteStringAsync(AppSpecificInfo[_iter9], cancellationToken);
                        }
                        await oprot.WriteMapEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                await oprot.WriteFieldStopAsync(cancellationToken);
                await oprot.WriteStructEndAsync(cancellationToken);
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override bool Equals(object that)
        {
            if (!(that is ConnectPayload other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return ((__isset.clientId == other.__isset.clientId) && ((!__isset.clientId) || (System.Object.Equals(ClientId, other.ClientId))))
                   && ((__isset.willTopic == other.__isset.willTopic) && ((!__isset.willTopic) || (System.Object.Equals(WillTopic, other.WillTopic))))
                   && ((__isset.willMessage == other.__isset.willMessage) && ((!__isset.willMessage) || (System.Object.Equals(WillMessage, other.WillMessage))))
                   && ((__isset.clientInfo == other.__isset.clientInfo) && ((!__isset.clientInfo) || (System.Object.Equals(ClientInfo, other.ClientInfo))))
                   && ((__isset.password == other.__isset.password) && ((!__isset.password) || (System.Object.Equals(Password, other.Password))))
                   && ((__isset.diffRequests == other.__isset.diffRequests) && ((!__isset.diffRequests) || (TCollections.Equals(DiffRequests, other.DiffRequests))))
                   && ((__isset.zeroRatingTokenHash == other.__isset.zeroRatingTokenHash) && ((!__isset.zeroRatingTokenHash) || (System.Object.Equals(ZeroRatingTokenHash, other.ZeroRatingTokenHash))))
                   && ((__isset.appSpecificInfo == other.__isset.appSpecificInfo) && ((!__isset.appSpecificInfo) || (TCollections.Equals(AppSpecificInfo, other.AppSpecificInfo))));
        }

        public override int GetHashCode() {
            int hashcode = 157;
            unchecked {
                if((ClientId != null) && __isset.clientId)
                {
                    hashcode = (hashcode * 397) + ClientId.GetHashCode();
                }
                if((WillTopic != null) && __isset.willTopic)
                {
                    hashcode = (hashcode * 397) + WillTopic.GetHashCode();
                }
                if((WillMessage != null) && __isset.willMessage)
                {
                    hashcode = (hashcode * 397) + WillMessage.GetHashCode();
                }
                if((ClientInfo != null) && __isset.clientInfo)
                {
                    hashcode = (hashcode * 397) + ClientInfo.GetHashCode();
                }
                if((Password != null) && __isset.password)
                {
                    hashcode = (hashcode * 397) + Password.GetHashCode();
                }
                if((DiffRequests != null) && __isset.diffRequests)
                {
                    hashcode = (hashcode * 397) + TCollections.GetHashCode(DiffRequests);
                }
                if((ZeroRatingTokenHash != null) && __isset.zeroRatingTokenHash)
                {
                    hashcode = (hashcode * 397) + ZeroRatingTokenHash.GetHashCode();
                }
                if((AppSpecificInfo != null) && __isset.appSpecificInfo)
                {
                    hashcode = (hashcode * 397) + TCollections.GetHashCode(AppSpecificInfo);
                }
            }
            return hashcode;
        }

        public override string ToString()
        {
            var sb = new StringBuilder("ConnectPayload(");
            int tmp10 = 0;
            if((ClientId != null) && __isset.clientId)
            {
                if(0 < tmp10++) { sb.Append(", "); }
                sb.Append("ClientId: ");
                ClientId.ToString(sb);
            }
            if((WillTopic != null) && __isset.willTopic)
            {
                if(0 < tmp10++) { sb.Append(", "); }
                sb.Append("WillTopic: ");
                WillTopic.ToString(sb);
            }
            if((WillMessage != null) && __isset.willMessage)
            {
                if(0 < tmp10++) { sb.Append(", "); }
                sb.Append("WillMessage: ");
                WillMessage.ToString(sb);
            }
            if((ClientInfo != null) && __isset.clientInfo)
            {
                if(0 < tmp10++) { sb.Append(", "); }
                sb.Append("ClientInfo: ");
                ClientInfo.ToString(sb);
            }
            if((Password != null) && __isset.password)
            {
                if(0 < tmp10++) { sb.Append(", "); }
                sb.Append("Password: ");
                Password.ToString(sb);
            }
            if((DiffRequests != null) && __isset.diffRequests)
            {
                if(0 < tmp10++) { sb.Append(", "); }
                sb.Append("DiffRequests: ");
                DiffRequests.ToString(sb);
            }
            if((ZeroRatingTokenHash != null) && __isset.zeroRatingTokenHash)
            {
                if(0 < tmp10++) { sb.Append(", "); }
                sb.Append("ZeroRatingTokenHash: ");
                ZeroRatingTokenHash.ToString(sb);
            }
            if((AppSpecificInfo != null) && __isset.appSpecificInfo)
            {
                if(0 < tmp10++) { sb.Append(", "); }
                sb.Append("AppSpecificInfo: ");
                AppSpecificInfo.ToString(sb);
            }
            sb.Append(')');
            return sb.ToString();
        }
    }
}

