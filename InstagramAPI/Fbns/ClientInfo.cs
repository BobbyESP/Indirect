/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System.Collections.Generic;
using System.Text;
using System.Threading;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;

#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling


namespace InstagramAPI.Fbns
{
    public partial class ClientInfo : TBase
    {
        private long _userId;
        private string _userAgent;
        private long _clientCapabilities;
        private long _endpointCapabilities;
        private int _publishFormat;
        private bool _noAutomaticForeground;
        private bool _makeUserAvailableInForeground;
        private string _deviceId;
        private bool _isInitiallyForeground;
        private int _networkType;
        private int _networkSubtype;
        private long _clientMqttSessionId;
        private string _clientIpAddress;
        private List<int> _subscribeTopics;
        private string _clientType;
        private long _appId;
        private bool _overrideNectarLogging;
        private string _connectTokenHash;
        private string _regionPreference;
        private string _deviceSecret;
        private sbyte _clientStack;
        private long _fbnsConnectionKey;
        private string _fbnsConnectionSecret;
        private string _fbnsDeviceId;
        private string _fbnsDeviceSecret;

        public long UserId
        {
            get
            {
                return _userId;
            }
            set
            {
                __isset.userId = true;
                this._userId = value;
            }
        }

        public string UserAgent
        {
            get
            {
                return _userAgent;
            }
            set
            {
                __isset.userAgent = true;
                this._userAgent = value;
            }
        }

        public long ClientCapabilities
        {
            get
            {
                return _clientCapabilities;
            }
            set
            {
                __isset.clientCapabilities = true;
                this._clientCapabilities = value;
            }
        }

        public long EndpointCapabilities
        {
            get
            {
                return _endpointCapabilities;
            }
            set
            {
                __isset.endpointCapabilities = true;
                this._endpointCapabilities = value;
            }
        }

        public int PublishFormat
        {
            get
            {
                return _publishFormat;
            }
            set
            {
                __isset.publishFormat = true;
                this._publishFormat = value;
            }
        }

        public bool NoAutomaticForeground
        {
            get
            {
                return _noAutomaticForeground;
            }
            set
            {
                __isset.noAutomaticForeground = true;
                this._noAutomaticForeground = value;
            }
        }

        public bool MakeUserAvailableInForeground
        {
            get
            {
                return _makeUserAvailableInForeground;
            }
            set
            {
                __isset.makeUserAvailableInForeground = true;
                this._makeUserAvailableInForeground = value;
            }
        }

        public string DeviceId
        {
            get
            {
                return _deviceId;
            }
            set
            {
                __isset.deviceId = true;
                this._deviceId = value;
            }
        }

        public bool IsInitiallyForeground
        {
            get
            {
                return _isInitiallyForeground;
            }
            set
            {
                __isset.isInitiallyForeground = true;
                this._isInitiallyForeground = value;
            }
        }

        public int NetworkType
        {
            get
            {
                return _networkType;
            }
            set
            {
                __isset.networkType = true;
                this._networkType = value;
            }
        }

        public int NetworkSubtype
        {
            get
            {
                return _networkSubtype;
            }
            set
            {
                __isset.networkSubtype = true;
                this._networkSubtype = value;
            }
        }

        public long ClientMqttSessionId
        {
            get
            {
                return _clientMqttSessionId;
            }
            set
            {
                __isset.clientMqttSessionId = true;
                this._clientMqttSessionId = value;
            }
        }

        public string ClientIpAddress
        {
            get
            {
                return _clientIpAddress;
            }
            set
            {
                __isset.clientIpAddress = true;
                this._clientIpAddress = value;
            }
        }

        public List<int> SubscribeTopics
        {
            get
            {
                return _subscribeTopics;
            }
            set
            {
                __isset.subscribeTopics = true;
                this._subscribeTopics = value;
            }
        }

        public string ClientType
        {
            get
            {
                return _clientType;
            }
            set
            {
                __isset.clientType = true;
                this._clientType = value;
            }
        }

        public long AppId
        {
            get
            {
                return _appId;
            }
            set
            {
                __isset.appId = true;
                this._appId = value;
            }
        }

        public bool OverrideNectarLogging
        {
            get
            {
                return _overrideNectarLogging;
            }
            set
            {
                __isset.overrideNectarLogging = true;
                this._overrideNectarLogging = value;
            }
        }

        public string ConnectTokenHash
        {
            get
            {
                return _connectTokenHash;
            }
            set
            {
                __isset.connectTokenHash = true;
                this._connectTokenHash = value;
            }
        }

        public string RegionPreference
        {
            get
            {
                return _regionPreference;
            }
            set
            {
                __isset.regionPreference = true;
                this._regionPreference = value;
            }
        }

        public string DeviceSecret
        {
            get
            {
                return _deviceSecret;
            }
            set
            {
                __isset.deviceSecret = true;
                this._deviceSecret = value;
            }
        }

        public sbyte ClientStack
        {
            get
            {
                return _clientStack;
            }
            set
            {
                __isset.clientStack = true;
                this._clientStack = value;
            }
        }

        public long FbnsConnectionKey
        {
            get
            {
                return _fbnsConnectionKey;
            }
            set
            {
                __isset.fbnsConnectionKey = true;
                this._fbnsConnectionKey = value;
            }
        }

        public string FbnsConnectionSecret
        {
            get
            {
                return _fbnsConnectionSecret;
            }
            set
            {
                __isset.fbnsConnectionSecret = true;
                this._fbnsConnectionSecret = value;
            }
        }

        public string FbnsDeviceId
        {
            get
            {
                return _fbnsDeviceId;
            }
            set
            {
                __isset.fbnsDeviceId = true;
                this._fbnsDeviceId = value;
            }
        }

        public string FbnsDeviceSecret
        {
            get
            {
                return _fbnsDeviceSecret;
            }
            set
            {
                __isset.fbnsDeviceSecret = true;
                this._fbnsDeviceSecret = value;
            }
        }


        public Isset __isset;
        public struct Isset
        {
            public bool userId;
            public bool userAgent;
            public bool clientCapabilities;
            public bool endpointCapabilities;
            public bool publishFormat;
            public bool noAutomaticForeground;
            public bool makeUserAvailableInForeground;
            public bool deviceId;
            public bool isInitiallyForeground;
            public bool networkType;
            public bool networkSubtype;
            public bool clientMqttSessionId;
            public bool clientIpAddress;
            public bool subscribeTopics;
            public bool clientType;
            public bool appId;
            public bool overrideNectarLogging;
            public bool connectTokenHash;
            public bool regionPreference;
            public bool deviceSecret;
            public bool clientStack;
            public bool fbnsConnectionKey;
            public bool fbnsConnectionSecret;
            public bool fbnsDeviceId;
            public bool fbnsDeviceSecret;
        }

        public ClientInfo()
        {
        }

        public ClientInfo DeepCopy()
        {
            var tmp11 = new ClientInfo();
            if(__isset.userId)
            {
                tmp11.UserId = this.UserId;
            }
            tmp11.__isset.userId = this.__isset.userId;
            if((UserAgent != null) && __isset.userAgent)
            {
                tmp11.UserAgent = this.UserAgent;
            }
            tmp11.__isset.userAgent = this.__isset.userAgent;
            if(__isset.clientCapabilities)
            {
                tmp11.ClientCapabilities = this.ClientCapabilities;
            }
            tmp11.__isset.clientCapabilities = this.__isset.clientCapabilities;
            if(__isset.endpointCapabilities)
            {
                tmp11.EndpointCapabilities = this.EndpointCapabilities;
            }
            tmp11.__isset.endpointCapabilities = this.__isset.endpointCapabilities;
            if(__isset.publishFormat)
            {
                tmp11.PublishFormat = this.PublishFormat;
            }
            tmp11.__isset.publishFormat = this.__isset.publishFormat;
            if(__isset.noAutomaticForeground)
            {
                tmp11.NoAutomaticForeground = this.NoAutomaticForeground;
            }
            tmp11.__isset.noAutomaticForeground = this.__isset.noAutomaticForeground;
            if(__isset.makeUserAvailableInForeground)
            {
                tmp11.MakeUserAvailableInForeground = this.MakeUserAvailableInForeground;
            }
            tmp11.__isset.makeUserAvailableInForeground = this.__isset.makeUserAvailableInForeground;
            if((DeviceId != null) && __isset.deviceId)
            {
                tmp11.DeviceId = this.DeviceId;
            }
            tmp11.__isset.deviceId = this.__isset.deviceId;
            if(__isset.isInitiallyForeground)
            {
                tmp11.IsInitiallyForeground = this.IsInitiallyForeground;
            }
            tmp11.__isset.isInitiallyForeground = this.__isset.isInitiallyForeground;
            if(__isset.networkType)
            {
                tmp11.NetworkType = this.NetworkType;
            }
            tmp11.__isset.networkType = this.__isset.networkType;
            if(__isset.networkSubtype)
            {
                tmp11.NetworkSubtype = this.NetworkSubtype;
            }
            tmp11.__isset.networkSubtype = this.__isset.networkSubtype;
            if(__isset.clientMqttSessionId)
            {
                tmp11.ClientMqttSessionId = this.ClientMqttSessionId;
            }
            tmp11.__isset.clientMqttSessionId = this.__isset.clientMqttSessionId;
            if((ClientIpAddress != null) && __isset.clientIpAddress)
            {
                tmp11.ClientIpAddress = this.ClientIpAddress;
            }
            tmp11.__isset.clientIpAddress = this.__isset.clientIpAddress;
            if((SubscribeTopics != null) && __isset.subscribeTopics)
            {
                tmp11.SubscribeTopics = this.SubscribeTopics.DeepCopy();
            }
            tmp11.__isset.subscribeTopics = this.__isset.subscribeTopics;
            if((ClientType != null) && __isset.clientType)
            {
                tmp11.ClientType = this.ClientType;
            }
            tmp11.__isset.clientType = this.__isset.clientType;
            if(__isset.appId)
            {
                tmp11.AppId = this.AppId;
            }
            tmp11.__isset.appId = this.__isset.appId;
            if(__isset.overrideNectarLogging)
            {
                tmp11.OverrideNectarLogging = this.OverrideNectarLogging;
            }
            tmp11.__isset.overrideNectarLogging = this.__isset.overrideNectarLogging;
            if((ConnectTokenHash != null) && __isset.connectTokenHash)
            {
                tmp11.ConnectTokenHash = this.ConnectTokenHash;
            }
            tmp11.__isset.connectTokenHash = this.__isset.connectTokenHash;
            if((RegionPreference != null) && __isset.regionPreference)
            {
                tmp11.RegionPreference = this.RegionPreference;
            }
            tmp11.__isset.regionPreference = this.__isset.regionPreference;
            if((DeviceSecret != null) && __isset.deviceSecret)
            {
                tmp11.DeviceSecret = this.DeviceSecret;
            }
            tmp11.__isset.deviceSecret = this.__isset.deviceSecret;
            if(__isset.clientStack)
            {
                tmp11.ClientStack = this.ClientStack;
            }
            tmp11.__isset.clientStack = this.__isset.clientStack;
            if(__isset.fbnsConnectionKey)
            {
                tmp11.FbnsConnectionKey = this.FbnsConnectionKey;
            }
            tmp11.__isset.fbnsConnectionKey = this.__isset.fbnsConnectionKey;
            if((FbnsConnectionSecret != null) && __isset.fbnsConnectionSecret)
            {
                tmp11.FbnsConnectionSecret = this.FbnsConnectionSecret;
            }
            tmp11.__isset.fbnsConnectionSecret = this.__isset.fbnsConnectionSecret;
            if((FbnsDeviceId != null) && __isset.fbnsDeviceId)
            {
                tmp11.FbnsDeviceId = this.FbnsDeviceId;
            }
            tmp11.__isset.fbnsDeviceId = this.__isset.fbnsDeviceId;
            if((FbnsDeviceSecret != null) && __isset.fbnsDeviceSecret)
            {
                tmp11.FbnsDeviceSecret = this.FbnsDeviceSecret;
            }
            tmp11.__isset.fbnsDeviceSecret = this.__isset.fbnsDeviceSecret;
            return tmp11;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
            iprot.IncrementRecursionDepth();
            try
            {
                TField field;
                await iprot.ReadStructBeginAsync(cancellationToken);
                while (true)
                {
                    field = await iprot.ReadFieldBeginAsync(cancellationToken);
                    if (field.Type == TType.Stop)
                    {
                        break;
                    }

                    switch (field.ID)
                    {
                        case 1:
                            if (field.Type == TType.I64)
                            {
                                UserId = await iprot.ReadI64Async(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 2:
                            if (field.Type == TType.String)
                            {
                                UserAgent = await iprot.ReadStringAsync(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 3:
                            if (field.Type == TType.I64)
                            {
                                ClientCapabilities = await iprot.ReadI64Async(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 4:
                            if (field.Type == TType.I64)
                            {
                                EndpointCapabilities = await iprot.ReadI64Async(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 5:
                            if (field.Type == TType.I32)
                            {
                                PublishFormat = await iprot.ReadI32Async(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 6:
                            if (field.Type == TType.Bool)
                            {
                                NoAutomaticForeground = await iprot.ReadBoolAsync(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 7:
                            if (field.Type == TType.Bool)
                            {
                                MakeUserAvailableInForeground = await iprot.ReadBoolAsync(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 8:
                            if (field.Type == TType.String)
                            {
                                DeviceId = await iprot.ReadStringAsync(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 9:
                            if (field.Type == TType.Bool)
                            {
                                IsInitiallyForeground = await iprot.ReadBoolAsync(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 10:
                            if (field.Type == TType.I32)
                            {
                                NetworkType = await iprot.ReadI32Async(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 11:
                            if (field.Type == TType.I32)
                            {
                                NetworkSubtype = await iprot.ReadI32Async(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 12:
                            if (field.Type == TType.I64)
                            {
                                ClientMqttSessionId = await iprot.ReadI64Async(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 13:
                            if (field.Type == TType.String)
                            {
                                ClientIpAddress = await iprot.ReadStringAsync(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 14:
                            if (field.Type == TType.List)
                            {
                                {
                                    TList _list12 = await iprot.ReadListBeginAsync(cancellationToken);
                                    SubscribeTopics = new List<int>(_list12.Count);
                                    for(int _i13 = 0; _i13 < _list12.Count; ++_i13)
                                    {
                                        int _elem14;
                                        _elem14 = await iprot.ReadI32Async(cancellationToken);
                                        SubscribeTopics.Add(_elem14);
                                    }
                                    await iprot.ReadListEndAsync(cancellationToken);
                                }
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 15:
                            if (field.Type == TType.String)
                            {
                                ClientType = await iprot.ReadStringAsync(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 16:
                            if (field.Type == TType.I64)
                            {
                                AppId = await iprot.ReadI64Async(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 17:
                            if (field.Type == TType.Bool)
                            {
                                OverrideNectarLogging = await iprot.ReadBoolAsync(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 18:
                            if (field.Type == TType.String)
                            {
                                ConnectTokenHash = await iprot.ReadStringAsync(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 19:
                            if (field.Type == TType.String)
                            {
                                RegionPreference = await iprot.ReadStringAsync(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 20:
                            if (field.Type == TType.String)
                            {
                                DeviceSecret = await iprot.ReadStringAsync(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 21:
                            if (field.Type == TType.Byte)
                            {
                                ClientStack = await iprot.ReadByteAsync(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 22:
                            if (field.Type == TType.I64)
                            {
                                FbnsConnectionKey = await iprot.ReadI64Async(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 23:
                            if (field.Type == TType.String)
                            {
                                FbnsConnectionSecret = await iprot.ReadStringAsync(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 24:
                            if (field.Type == TType.String)
                            {
                                FbnsDeviceId = await iprot.ReadStringAsync(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        case 25:
                            if (field.Type == TType.String)
                            {
                                FbnsDeviceSecret = await iprot.ReadStringAsync(cancellationToken);
                            }
                            else
                            {
                                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            }
                            break;
                        default: 
                            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                            break;
                    }

                    await iprot.ReadFieldEndAsync(cancellationToken);
                }

                await iprot.ReadStructEndAsync(cancellationToken);
            }
            finally
            {
                iprot.DecrementRecursionDepth();
            }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
            oprot.IncrementRecursionDepth();
            try
            {
                var struc = new TStruct("ClientInfo");
                await oprot.WriteStructBeginAsync(struc, cancellationToken);
                var field = new TField();
                if(__isset.userId)
                {
                    field.Name = "userId";
                    field.Type = TType.I64;
                    field.ID = 1;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteI64Async(UserId, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if((UserAgent != null) && __isset.userAgent)
                {
                    field.Name = "userAgent";
                    field.Type = TType.String;
                    field.ID = 2;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteStringAsync(UserAgent, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if(__isset.clientCapabilities)
                {
                    field.Name = "clientCapabilities";
                    field.Type = TType.I64;
                    field.ID = 3;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteI64Async(ClientCapabilities, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if(__isset.endpointCapabilities)
                {
                    field.Name = "endpointCapabilities";
                    field.Type = TType.I64;
                    field.ID = 4;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteI64Async(EndpointCapabilities, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if(__isset.publishFormat)
                {
                    field.Name = "publishFormat";
                    field.Type = TType.I32;
                    field.ID = 5;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteI32Async(PublishFormat, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if(__isset.noAutomaticForeground)
                {
                    field.Name = "noAutomaticForeground";
                    field.Type = TType.Bool;
                    field.ID = 6;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBoolAsync(NoAutomaticForeground, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if(__isset.makeUserAvailableInForeground)
                {
                    field.Name = "makeUserAvailableInForeground";
                    field.Type = TType.Bool;
                    field.ID = 7;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBoolAsync(MakeUserAvailableInForeground, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if((DeviceId != null) && __isset.deviceId)
                {
                    field.Name = "deviceId";
                    field.Type = TType.String;
                    field.ID = 8;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteStringAsync(DeviceId, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if(__isset.isInitiallyForeground)
                {
                    field.Name = "isInitiallyForeground";
                    field.Type = TType.Bool;
                    field.ID = 9;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBoolAsync(IsInitiallyForeground, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if(__isset.networkType)
                {
                    field.Name = "networkType";
                    field.Type = TType.I32;
                    field.ID = 10;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteI32Async(NetworkType, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if(__isset.networkSubtype)
                {
                    field.Name = "networkSubtype";
                    field.Type = TType.I32;
                    field.ID = 11;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteI32Async(NetworkSubtype, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if(__isset.clientMqttSessionId)
                {
                    field.Name = "clientMqttSessionId";
                    field.Type = TType.I64;
                    field.ID = 12;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteI64Async(ClientMqttSessionId, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if((ClientIpAddress != null) && __isset.clientIpAddress)
                {
                    field.Name = "clientIpAddress";
                    field.Type = TType.String;
                    field.ID = 13;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteStringAsync(ClientIpAddress, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if((SubscribeTopics != null) && __isset.subscribeTopics)
                {
                    field.Name = "subscribeTopics";
                    field.Type = TType.List;
                    field.ID = 14;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    {
                        await oprot.WriteListBeginAsync(new TList(TType.I32, SubscribeTopics.Count), cancellationToken);
                        foreach (int _iter15 in SubscribeTopics)
                        {
                            await oprot.WriteI32Async(_iter15, cancellationToken);
                        }
                        await oprot.WriteListEndAsync(cancellationToken);
                    }
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if((ClientType != null) && __isset.clientType)
                {
                    field.Name = "clientType";
                    field.Type = TType.String;
                    field.ID = 15;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteStringAsync(ClientType, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if(__isset.appId)
                {
                    field.Name = "appId";
                    field.Type = TType.I64;
                    field.ID = 16;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteI64Async(AppId, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if(__isset.overrideNectarLogging)
                {
                    field.Name = "overrideNectarLogging";
                    field.Type = TType.Bool;
                    field.ID = 17;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteBoolAsync(OverrideNectarLogging, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if((ConnectTokenHash != null) && __isset.connectTokenHash)
                {
                    field.Name = "connectTokenHash";
                    field.Type = TType.String;
                    field.ID = 18;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteStringAsync(ConnectTokenHash, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if((RegionPreference != null) && __isset.regionPreference)
                {
                    field.Name = "regionPreference";
                    field.Type = TType.String;
                    field.ID = 19;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteStringAsync(RegionPreference, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if((DeviceSecret != null) && __isset.deviceSecret)
                {
                    field.Name = "deviceSecret";
                    field.Type = TType.String;
                    field.ID = 20;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteStringAsync(DeviceSecret, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if(__isset.clientStack)
                {
                    field.Name = "clientStack";
                    field.Type = TType.Byte;
                    field.ID = 21;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteByteAsync(ClientStack, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if(__isset.fbnsConnectionKey)
                {
                    field.Name = "fbnsConnectionKey";
                    field.Type = TType.I64;
                    field.ID = 22;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteI64Async(FbnsConnectionKey, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if((FbnsConnectionSecret != null) && __isset.fbnsConnectionSecret)
                {
                    field.Name = "fbnsConnectionSecret";
                    field.Type = TType.String;
                    field.ID = 23;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteStringAsync(FbnsConnectionSecret, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if((FbnsDeviceId != null) && __isset.fbnsDeviceId)
                {
                    field.Name = "fbnsDeviceId";
                    field.Type = TType.String;
                    field.ID = 24;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteStringAsync(FbnsDeviceId, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                if((FbnsDeviceSecret != null) && __isset.fbnsDeviceSecret)
                {
                    field.Name = "fbnsDeviceSecret";
                    field.Type = TType.String;
                    field.ID = 25;
                    await oprot.WriteFieldBeginAsync(field, cancellationToken);
                    await oprot.WriteStringAsync(FbnsDeviceSecret, cancellationToken);
                    await oprot.WriteFieldEndAsync(cancellationToken);
                }
                await oprot.WriteFieldStopAsync(cancellationToken);
                await oprot.WriteStructEndAsync(cancellationToken);
            }
            finally
            {
                oprot.DecrementRecursionDepth();
            }
        }

        public override bool Equals(object that)
        {
            if (!(that is ClientInfo other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return ((__isset.userId == other.__isset.userId) && ((!__isset.userId) || (System.Object.Equals(UserId, other.UserId))))
                   && ((__isset.userAgent == other.__isset.userAgent) && ((!__isset.userAgent) || (System.Object.Equals(UserAgent, other.UserAgent))))
                   && ((__isset.clientCapabilities == other.__isset.clientCapabilities) && ((!__isset.clientCapabilities) || (System.Object.Equals(ClientCapabilities, other.ClientCapabilities))))
                   && ((__isset.endpointCapabilities == other.__isset.endpointCapabilities) && ((!__isset.endpointCapabilities) || (System.Object.Equals(EndpointCapabilities, other.EndpointCapabilities))))
                   && ((__isset.publishFormat == other.__isset.publishFormat) && ((!__isset.publishFormat) || (System.Object.Equals(PublishFormat, other.PublishFormat))))
                   && ((__isset.noAutomaticForeground == other.__isset.noAutomaticForeground) && ((!__isset.noAutomaticForeground) || (System.Object.Equals(NoAutomaticForeground, other.NoAutomaticForeground))))
                   && ((__isset.makeUserAvailableInForeground == other.__isset.makeUserAvailableInForeground) && ((!__isset.makeUserAvailableInForeground) || (System.Object.Equals(MakeUserAvailableInForeground, other.MakeUserAvailableInForeground))))
                   && ((__isset.deviceId == other.__isset.deviceId) && ((!__isset.deviceId) || (System.Object.Equals(DeviceId, other.DeviceId))))
                   && ((__isset.isInitiallyForeground == other.__isset.isInitiallyForeground) && ((!__isset.isInitiallyForeground) || (System.Object.Equals(IsInitiallyForeground, other.IsInitiallyForeground))))
                   && ((__isset.networkType == other.__isset.networkType) && ((!__isset.networkType) || (System.Object.Equals(NetworkType, other.NetworkType))))
                   && ((__isset.networkSubtype == other.__isset.networkSubtype) && ((!__isset.networkSubtype) || (System.Object.Equals(NetworkSubtype, other.NetworkSubtype))))
                   && ((__isset.clientMqttSessionId == other.__isset.clientMqttSessionId) && ((!__isset.clientMqttSessionId) || (System.Object.Equals(ClientMqttSessionId, other.ClientMqttSessionId))))
                   && ((__isset.clientIpAddress == other.__isset.clientIpAddress) && ((!__isset.clientIpAddress) || (System.Object.Equals(ClientIpAddress, other.ClientIpAddress))))
                   && ((__isset.subscribeTopics == other.__isset.subscribeTopics) && ((!__isset.subscribeTopics) || (TCollections.Equals(SubscribeTopics, other.SubscribeTopics))))
                   && ((__isset.clientType == other.__isset.clientType) && ((!__isset.clientType) || (System.Object.Equals(ClientType, other.ClientType))))
                   && ((__isset.appId == other.__isset.appId) && ((!__isset.appId) || (System.Object.Equals(AppId, other.AppId))))
                   && ((__isset.overrideNectarLogging == other.__isset.overrideNectarLogging) && ((!__isset.overrideNectarLogging) || (System.Object.Equals(OverrideNectarLogging, other.OverrideNectarLogging))))
                   && ((__isset.connectTokenHash == other.__isset.connectTokenHash) && ((!__isset.connectTokenHash) || (System.Object.Equals(ConnectTokenHash, other.ConnectTokenHash))))
                   && ((__isset.regionPreference == other.__isset.regionPreference) && ((!__isset.regionPreference) || (System.Object.Equals(RegionPreference, other.RegionPreference))))
                   && ((__isset.deviceSecret == other.__isset.deviceSecret) && ((!__isset.deviceSecret) || (System.Object.Equals(DeviceSecret, other.DeviceSecret))))
                   && ((__isset.clientStack == other.__isset.clientStack) && ((!__isset.clientStack) || (System.Object.Equals(ClientStack, other.ClientStack))))
                   && ((__isset.fbnsConnectionKey == other.__isset.fbnsConnectionKey) && ((!__isset.fbnsConnectionKey) || (System.Object.Equals(FbnsConnectionKey, other.FbnsConnectionKey))))
                   && ((__isset.fbnsConnectionSecret == other.__isset.fbnsConnectionSecret) && ((!__isset.fbnsConnectionSecret) || (System.Object.Equals(FbnsConnectionSecret, other.FbnsConnectionSecret))))
                   && ((__isset.fbnsDeviceId == other.__isset.fbnsDeviceId) && ((!__isset.fbnsDeviceId) || (System.Object.Equals(FbnsDeviceId, other.FbnsDeviceId))))
                   && ((__isset.fbnsDeviceSecret == other.__isset.fbnsDeviceSecret) && ((!__isset.fbnsDeviceSecret) || (System.Object.Equals(FbnsDeviceSecret, other.FbnsDeviceSecret))));
        }

        public override int GetHashCode() {
            int hashcode = 157;
            unchecked {
                if(__isset.userId)
                {
                    hashcode = (hashcode * 397) + UserId.GetHashCode();
                }
                if((UserAgent != null) && __isset.userAgent)
                {
                    hashcode = (hashcode * 397) + UserAgent.GetHashCode();
                }
                if(__isset.clientCapabilities)
                {
                    hashcode = (hashcode * 397) + ClientCapabilities.GetHashCode();
                }
                if(__isset.endpointCapabilities)
                {
                    hashcode = (hashcode * 397) + EndpointCapabilities.GetHashCode();
                }
                if(__isset.publishFormat)
                {
                    hashcode = (hashcode * 397) + PublishFormat.GetHashCode();
                }
                if(__isset.noAutomaticForeground)
                {
                    hashcode = (hashcode * 397) + NoAutomaticForeground.GetHashCode();
                }
                if(__isset.makeUserAvailableInForeground)
                {
                    hashcode = (hashcode * 397) + MakeUserAvailableInForeground.GetHashCode();
                }
                if((DeviceId != null) && __isset.deviceId)
                {
                    hashcode = (hashcode * 397) + DeviceId.GetHashCode();
                }
                if(__isset.isInitiallyForeground)
                {
                    hashcode = (hashcode * 397) + IsInitiallyForeground.GetHashCode();
                }
                if(__isset.networkType)
                {
                    hashcode = (hashcode * 397) + NetworkType.GetHashCode();
                }
                if(__isset.networkSubtype)
                {
                    hashcode = (hashcode * 397) + NetworkSubtype.GetHashCode();
                }
                if(__isset.clientMqttSessionId)
                {
                    hashcode = (hashcode * 397) + ClientMqttSessionId.GetHashCode();
                }
                if((ClientIpAddress != null) && __isset.clientIpAddress)
                {
                    hashcode = (hashcode * 397) + ClientIpAddress.GetHashCode();
                }
                if((SubscribeTopics != null) && __isset.subscribeTopics)
                {
                    hashcode = (hashcode * 397) + TCollections.GetHashCode(SubscribeTopics);
                }
                if((ClientType != null) && __isset.clientType)
                {
                    hashcode = (hashcode * 397) + ClientType.GetHashCode();
                }
                if(__isset.appId)
                {
                    hashcode = (hashcode * 397) + AppId.GetHashCode();
                }
                if(__isset.overrideNectarLogging)
                {
                    hashcode = (hashcode * 397) + OverrideNectarLogging.GetHashCode();
                }
                if((ConnectTokenHash != null) && __isset.connectTokenHash)
                {
                    hashcode = (hashcode * 397) + ConnectTokenHash.GetHashCode();
                }
                if((RegionPreference != null) && __isset.regionPreference)
                {
                    hashcode = (hashcode * 397) + RegionPreference.GetHashCode();
                }
                if((DeviceSecret != null) && __isset.deviceSecret)
                {
                    hashcode = (hashcode * 397) + DeviceSecret.GetHashCode();
                }
                if(__isset.clientStack)
                {
                    hashcode = (hashcode * 397) + ClientStack.GetHashCode();
                }
                if(__isset.fbnsConnectionKey)
                {
                    hashcode = (hashcode * 397) + FbnsConnectionKey.GetHashCode();
                }
                if((FbnsConnectionSecret != null) && __isset.fbnsConnectionSecret)
                {
                    hashcode = (hashcode * 397) + FbnsConnectionSecret.GetHashCode();
                }
                if((FbnsDeviceId != null) && __isset.fbnsDeviceId)
                {
                    hashcode = (hashcode * 397) + FbnsDeviceId.GetHashCode();
                }
                if((FbnsDeviceSecret != null) && __isset.fbnsDeviceSecret)
                {
                    hashcode = (hashcode * 397) + FbnsDeviceSecret.GetHashCode();
                }
            }
            return hashcode;
        }

        public override string ToString()
        {
            var sb = new StringBuilder("ClientInfo(");
            int tmp16 = 0;
            if(__isset.userId)
            {
                if(0 < tmp16++) { sb.Append(", "); }
                sb.Append("UserId: ");
                UserId.ToString(sb);
            }
            if((UserAgent != null) && __isset.userAgent)
            {
                if(0 < tmp16++) { sb.Append(", "); }
                sb.Append("UserAgent: ");
                UserAgent.ToString(sb);
            }
            if(__isset.clientCapabilities)
            {
                if(0 < tmp16++) { sb.Append(", "); }
                sb.Append("ClientCapabilities: ");
                ClientCapabilities.ToString(sb);
            }
            if(__isset.endpointCapabilities)
            {
                if(0 < tmp16++) { sb.Append(", "); }
                sb.Append("EndpointCapabilities: ");
                EndpointCapabilities.ToString(sb);
            }
            if(__isset.publishFormat)
            {
                if(0 < tmp16++) { sb.Append(", "); }
                sb.Append("PublishFormat: ");
                PublishFormat.ToString(sb);
            }
            if(__isset.noAutomaticForeground)
            {
                if(0 < tmp16++) { sb.Append(", "); }
                sb.Append("NoAutomaticForeground: ");
                NoAutomaticForeground.ToString(sb);
            }
            if(__isset.makeUserAvailableInForeground)
            {
                if(0 < tmp16++) { sb.Append(", "); }
                sb.Append("MakeUserAvailableInForeground: ");
                MakeUserAvailableInForeground.ToString(sb);
            }
            if((DeviceId != null) && __isset.deviceId)
            {
                if(0 < tmp16++) { sb.Append(", "); }
                sb.Append("DeviceId: ");
                DeviceId.ToString(sb);
            }
            if(__isset.isInitiallyForeground)
            {
                if(0 < tmp16++) { sb.Append(", "); }
                sb.Append("IsInitiallyForeground: ");
                IsInitiallyForeground.ToString(sb);
            }
            if(__isset.networkType)
            {
                if(0 < tmp16++) { sb.Append(", "); }
                sb.Append("NetworkType: ");
                NetworkType.ToString(sb);
            }
            if(__isset.networkSubtype)
            {
                if(0 < tmp16++) { sb.Append(", "); }
                sb.Append("NetworkSubtype: ");
                NetworkSubtype.ToString(sb);
            }
            if(__isset.clientMqttSessionId)
            {
                if(0 < tmp16++) { sb.Append(", "); }
                sb.Append("ClientMqttSessionId: ");
                ClientMqttSessionId.ToString(sb);
            }
            if((ClientIpAddress != null) && __isset.clientIpAddress)
            {
                if(0 < tmp16++) { sb.Append(", "); }
                sb.Append("ClientIpAddress: ");
                ClientIpAddress.ToString(sb);
            }
            if((SubscribeTopics != null) && __isset.subscribeTopics)
            {
                if(0 < tmp16++) { sb.Append(", "); }
                sb.Append("SubscribeTopics: ");
                SubscribeTopics.ToString(sb);
            }
            if((ClientType != null) && __isset.clientType)
            {
                if(0 < tmp16++) { sb.Append(", "); }
                sb.Append("ClientType: ");
                ClientType.ToString(sb);
            }
            if(__isset.appId)
            {
                if(0 < tmp16++) { sb.Append(", "); }
                sb.Append("AppId: ");
                AppId.ToString(sb);
            }
            if(__isset.overrideNectarLogging)
            {
                if(0 < tmp16++) { sb.Append(", "); }
                sb.Append("OverrideNectarLogging: ");
                OverrideNectarLogging.ToString(sb);
            }
            if((ConnectTokenHash != null) && __isset.connectTokenHash)
            {
                if(0 < tmp16++) { sb.Append(", "); }
                sb.Append("ConnectTokenHash: ");
                ConnectTokenHash.ToString(sb);
            }
            if((RegionPreference != null) && __isset.regionPreference)
            {
                if(0 < tmp16++) { sb.Append(", "); }
                sb.Append("RegionPreference: ");
                RegionPreference.ToString(sb);
            }
            if((DeviceSecret != null) && __isset.deviceSecret)
            {
                if(0 < tmp16++) { sb.Append(", "); }
                sb.Append("DeviceSecret: ");
                DeviceSecret.ToString(sb);
            }
            if(__isset.clientStack)
            {
                if(0 < tmp16++) { sb.Append(", "); }
                sb.Append("ClientStack: ");
                ClientStack.ToString(sb);
            }
            if(__isset.fbnsConnectionKey)
            {
                if(0 < tmp16++) { sb.Append(", "); }
                sb.Append("FbnsConnectionKey: ");
                FbnsConnectionKey.ToString(sb);
            }
            if((FbnsConnectionSecret != null) && __isset.fbnsConnectionSecret)
            {
                if(0 < tmp16++) { sb.Append(", "); }
                sb.Append("FbnsConnectionSecret: ");
                FbnsConnectionSecret.ToString(sb);
            }
            if((FbnsDeviceId != null) && __isset.fbnsDeviceId)
            {
                if(0 < tmp16++) { sb.Append(", "); }
                sb.Append("FbnsDeviceId: ");
                FbnsDeviceId.ToString(sb);
            }
            if((FbnsDeviceSecret != null) && __isset.fbnsDeviceSecret)
            {
                if(0 < tmp16++) { sb.Append(", "); }
                sb.Append("FbnsDeviceSecret: ");
                FbnsDeviceSecret.ToString(sb);
            }
            sb.Append(')');
            return sb.ToString();
        }
    }
}

