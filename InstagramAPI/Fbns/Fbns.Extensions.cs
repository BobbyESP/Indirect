/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System.Collections.Generic;
using Thrift.Collections;

#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

namespace InstagramAPI.Fbns
{
    public static class FbnsExtensions
    {
        public static bool Equals(this Dictionary<string, string> instance, object that)
        {
            if (!(that is Dictionary<string, string> other)) return false;
            if (ReferenceEquals(instance, other)) return true;

            return TCollections.Equals(instance, other);
        }


        public static int GetHashCode(this Dictionary<string, string> instance)
        {
            return TCollections.GetHashCode(instance);
        }


        public static Dictionary<string, string> DeepCopy(this Dictionary<string, string> source)
        {
            if (source == null)
                return null;

            var tmp17 = new Dictionary<string, string>(source.Count);
            foreach (var pair in source)
                tmp17.Add((pair.Key != null) ? pair.Key : null, (pair.Value != null) ? pair.Value : null);
            return tmp17;
        }


        public static bool Equals(this List<int> instance, object that)
        {
            if (!(that is List<int> other)) return false;
            if (ReferenceEquals(instance, other)) return true;

            return TCollections.Equals(instance, other);
        }


        public static int GetHashCode(this List<int> instance)
        {
            return TCollections.GetHashCode(instance);
        }


        public static List<int> DeepCopy(this List<int> source)
        {
            if (source == null)
                return null;

            var tmp18 = new List<int>(source.Count);
            foreach (var elem in source)
                tmp18.Add(elem);
            return tmp18;
        }


        public static bool Equals(this List<string> instance, object that)
        {
            if (!(that is List<string> other)) return false;
            if (ReferenceEquals(instance, other)) return true;

            return TCollections.Equals(instance, other);
        }


        public static int GetHashCode(this List<string> instance)
        {
            return TCollections.GetHashCode(instance);
        }


        public static List<string> DeepCopy(this List<string> source)
        {
            if (source == null)
                return null;

            var tmp19 = new List<string>(source.Count);
            foreach (var elem in source)
                tmp19.Add((elem != null) ? elem : null);
            return tmp19;
        }


    }
}
